import os
import base64
import time
import json
import requests
import telebot
import telebot.apihelper
from PIL import Image
from datetime import datetime

# üîê –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_TOKEN = '7660835183:AAHo41BZJD-pvWA_r8lERB4Kz_mPK72ZPD0'
FOLDER_ID = 'b1gq945gphdkvsc6dnli'
TOKEN_FILE = 'generated/iam_token.json'

# üì• –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ IAM-—Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞
def load_iam_token():
    try:
        with open(TOKEN_FILE, "r", encoding="utf-8") as f:
            token_data = json.load(f)
            return token_data["iam_token"]
    except Exception as e:
        raise Exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å IAM-—Ç–æ–∫–µ–Ω: {e}")

# ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram
telebot.apihelper.SESSION_TIMEOUT = 120
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
if not os.path.exists("generated"):
    os.makedirs("generated")

# üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Yandex API
def generate_image(text):
    IAM_TOKEN = load_iam_token()

    print("üì§ –ó–∞–ø—Ä–æ—Å –≤ Yandex API...")
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/imageGenerationAsync"
    headers = {
        "Authorization": f"Bearer {IAM_TOKEN}",
        "X-Folder-Id": FOLDER_ID
    }
    data = {
        "modelUri": f"art://{FOLDER_ID}/yandex-art/latest",
        "generationOptions": {
            "seed": "1863",
            "aspectRatio": {"widthRatio": "2", "heightRatio": "1"}
        },
        "messages": [{"weight": "1", "text": text}]
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=(10, 120))
        response.raise_for_status()
        print("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except requests.exceptions.RequestException as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    request_id = response.json().get("id")
    print(f"üì® ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}")
    result_url = f"https://llm.api.cloud.yandex.net/operations/{request_id}"

    for attempt in range(30):
        print(f"‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞... –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/30")
        try:
            result_response = requests.get(result_url, headers=headers, timeout=(5, 30))
            result_response.raise_for_status()
        except requests.exceptions.RequestException as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

        result = result_response.json()
        if result.get("done", False):
            image_base64 = result.get("response", {}).get("image")
            if not image_base64:
                raise Exception("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

            raw_path = "generated/generated_image_raw.jpeg"
            final_path = "generated/generated_image.jpeg"
            with open(raw_path, "wb") as f:
                f.write(base64.b64decode(image_base64))

            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π (–¥–æ 600x600)
            with Image.open(raw_path) as img:
                img = img.convert("RGB")
                img.thumbnail((600, 600), Image.LANCZOS)
                img.save(final_path, "JPEG", optimize=True, quality=85)

            print("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
            return final_path

        time.sleep(3)

    raise TimeoutError("‚è±Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ.")

# üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /picture
@bot.message_handler(commands=['picture'])
def send_picture(message):
    try:
        text = message.text.split(' ', 1)[1].strip()
        bot.send_message(message.chat.id, "üõ† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        print(f"[{datetime.now().strftime('%H:%M:%S')}] üì• –ó–∞–ø—Ä–æ—Å: {text}")

        image_path = generate_image(text)

        with open(image_path, 'rb') as doc:
            bot.send_document(message.chat.id, doc, caption="‚úÖ –í–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")

    except IndexError:
        bot.reply_to(message, "‚ùó –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n/picture —Ä–æ–∑–∞ –≤ —Ä–æ—Å–µ", parse_mode="Markdown")
    except TimeoutError as e:
        bot.reply_to(message, f"‚åõ {e}")
        print(f"‚õî –¢–∞–π–º–∞—É—Ç: {e}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"üõë –û—à–∏–±–∫–∞: {e}")

# üëã –ö–æ–º–∞–Ω–¥–∞ /start (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.\n\n"
        "–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É:\n`/picture` + —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è.\n\n–ü—Ä–∏–º–µ—Ä:\n`/picture —Ä–æ–∑–∞ –≤ –∫–∞–ø–ª—è—Ö —Ä–æ—Å—ã`",
        parse_mode="Markdown"
    )

# ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
print("=" * 50)
print("ü§ñ AI Image Telegram Bot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
print("üí¨ –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥ –≤ Telegram...")
print("=" * 50)

bot.polling()
